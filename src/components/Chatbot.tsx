import React, { useState, useRef, useEffect } from 'react';

const N8N_API_ENDPOINT = 'https://your-n8n-endpoint.com/webhook/chatbot'; // ƒê·ªïi endpoint th√†nh th·∫≠t

// C·∫•u tr√∫c tin nh·∫Øn c√≥ th√™m timestamp
interface Message {
    sender: 'user' | 'bot';
    text: string;
    timestamp: string;
}

const Chatbot: React.FC = () => {
    // Tr·∫°ng th√°i hi·ªán/·∫©n chatbot
    const [open, setOpen] = useState(false);

    // Danh s√°ch tin nh·∫Øn ban ƒë·∫ßu v·ªõi tin nh·∫Øn ch√†o t·ª´ bot
    const [messages, setMessages] = useState<Message[]>([
        {
            sender: 'bot',
            text: 'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?',
            timestamp: new Date().toLocaleTimeString()
        }
    ]);

    // Tr·∫°ng th√°i input ng∆∞·ªùi d√πng
    const [input, setInput] = useState('');

    // Tr·∫°ng th√°i bot ƒëang tr·∫£ l·ªùi
    const [loading, setLoading] = useState(false);

    // Tham chi·∫øu ƒë·∫øn ph·∫ßn t·ª≠ cu·ªëi ƒë·ªÉ auto scroll
    const messagesEndRef = useRef<HTMLDivElement>(null);

    // Scroll xu·ªëng cu·ªëi khi c√≥ tin nh·∫Øn m·ªõi ho·∫∑c khi m·ªü chat
    useEffect(() => {
        if (open && messagesEndRef.current) {
            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
        }
    }, [messages, open]);

    // H√†m g·ª≠i tin nh·∫Øn
    const sendMessage = async () => {
        if (!input.trim()) return;

        const now = new Date().toLocaleTimeString(); // L·∫•y gi·ªù hi·ªán t·∫°i

        // Th√™m tin nh·∫Øn c·ªßa user
        const userMsg: Message = { sender: 'user', text: input, timestamp: now };
        setMessages((msgs) => [...msgs, userMsg]);

        setInput('');
        setLoading(true);

        try {
            // G·ª≠i ƒë·∫øn n8n webhook
            const res = await fetch(N8N_API_ENDPOINT, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: input })
            });

            const data = await res.json();

            // Ph·∫£n h·ªìi t·ª´ bot
            const botReply: Message = {
                sender: 'bot',
                text: data.reply || 'Xin l·ªói, t√¥i ch∆∞a hi·ªÉu √Ω b·∫°n.',
                timestamp: new Date().toLocaleTimeString()
            };
            setMessages((msgs) => [...msgs, botReply]);
        } catch (e) {
            // L·ªói trong qu√° tr√¨nh g·ªçi API
            setMessages((msgs) => [
                ...msgs,
                {
                    sender: 'bot',
                    text: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.',
                    timestamp: new Date().toLocaleTimeString()
                }
            ]);
        } finally {
            setLoading(false);
        }
    };

    // G·ª≠i khi b·∫•m ph√≠m Enter
    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
        if (e.key === 'Enter') sendMessage();
    };

    return (
        <div style={{ position: 'fixed', bottom: 24, right: 24, zIndex: 1000 }}>
            {open ? (
                <div className="w-80 h-96 bg-white shadow-2xl rounded-xl flex flex-col border border-gray-200 animate-fade-in">
                    {/* Header */}
                    <div className="flex items-center justify-between px-4 py-3 border-b bg-gradient-to-r from-primary-600 to-primary-400 rounded-t-xl">
                        <span className="font-semibold text-white">H·ªó tr·ª£ kh√°ch h√†ng</span>
                        <button onClick={() => setOpen(false)} className="text-white hover:text-gray-200 text-xl">√ó</button>
                    </div>

                    {/* Messages */}
                    <div className="flex-1 overflow-y-auto px-4 py-2 bg-gray-50" style={{ scrollbarWidth: 'thin' }}>
                        {messages.map((msg, idx) => (
                            <div key={idx} className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'} mb-2`}>
                                <div className={`px-3 py-2 rounded-lg max-w-[75%] text-sm ${msg.sender === 'user' ? 'bg-primary-600 text-white' : 'bg-white border'}`}>
                                    <div>{msg.text}</div>
                                    <div className="text-[10px] text-gray-500 text-right mt-1">{msg.timestamp}</div>
                                </div>
                            </div>
                        ))}

                        {/* Hi·ªÉn th·ªã khi ƒëang tr·∫£ l·ªùi */}
                        {loading && (
                            <div className="flex justify-start mb-2">
                                <div className="px-3 py-2 rounded-lg bg-white border max-w-[75%] text-sm italic text-gray-500">
                                    Bot ƒëang tr·∫£ l·ªùi...
                                </div>
                            </div>
                        )}

                        <div ref={messagesEndRef} />
                    </div>

                    {/* Input */}
                    <div className="p-3 border-t bg-white flex items-center gap-2">
                        <input
                            type="text"
                            className="flex-1 px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
                            placeholder="Nh·∫≠p tin nh·∫Øn..."
                            value={input}
                            onChange={e => setInput(e.target.value)}
                            onKeyDown={handleKeyDown}
                            disabled={loading}
                        />
                        <button
                            onClick={sendMessage}
                            className="bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-semibold disabled:opacity-50"
                            disabled={loading || !input.trim()}
                        >
                            G·ª≠i
                        </button>
                    </div>
                </div>
            ) : (
                <button
                    onClick={() => setOpen(true)}
                    className="bg-primary-600 hover:bg-primary-700 text-white rounded-full shadow-lg w-16 h-16 flex items-center justify-center text-3xl animate-bounce"
                    aria-label="M·ªü chatbot h·ªó tr·ª£"
                >
                    üí¨
                </button>
            )}
        </div>
    );
};

export default Chatbot;
